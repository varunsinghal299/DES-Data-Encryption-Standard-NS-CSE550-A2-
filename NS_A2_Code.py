# -*- coding: utf-8 -*-
"""A2_Sachin_MT20093_Varun_MT20099code

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xdwp0oLbcg0O802IFbjqAnAV-1mCXUDJ
"""

################################################################################
#convert string headecimal to binary.
def hexaTobinary(str):
  
  hash = {'0' : "0000",
          '1' : "0001",
          '2' : "0010",
          '3' : "0011",
          '4' : "0100",
          '5' : "0101",
          '6' : "0110",
          '7' : "0111",
          '8' : "1000",
          '9' : "1001",
          'A' : "1010",
          'B' : "1011",
          'C' : "1100",
          'D' : "1101",
          'E' : "1110",
          'F' : "1111" }
  temp = ""
  l = len(str)
  for i in range(l):
    temp = temp + hash[str[i]]
    
  return temp

################################################################################
#convert binary to hexadecimal.
def binaryTohex(str):
  
  hash = {"0000" : '0',
          "0001" : '1',
          "0010" : '2',
          "0011" : '3',
          "0100" : '4',
          "0101" : '5',
          "0110" : '6',
          "0111" : '7',
          "1000" : '8',
          "1001" : '9',
          "1010" : 'A',
          "1011" : 'B',
          "1100" : 'C',
          "1101" : 'D',
          "1110" : 'E',
          "1111" : 'F' }
          
  temp = ""
  for i in range(0,len(str),4):
    ch = ""
    ch = ch + str[i]
    ch = ch + str[i + 1]
    ch = ch + str[i + 2]
    ch = ch + str[i + 3]
    temp = temp + hash[ch]
         
  return temp



################################################################################
#convert string binary to decimal.
def binTodec(str):
  binary = str
  decimal, i, n = 0, 0, 0
  while(str != 0):
    dec = str % 10
    decimal = decimal + dec * pow(2, i)
    str = str//10
    i += 1
  return decimal



################################################################################
#convert decimal to binary number.
def decTobin(s):
  
  out = bin(s).replace("0b", "")
  if(len(out)%4 != 0):
    div = len(out) / 4
    div = int(div)
    counter =(4 * (div + 1)) - len(out)
    for i in range(0, counter):
      out = '0' + out
  return out


################################################################################
#permute key according to the table by given bit.
def permute(key,table,bit):
  
  permutation = ""
  for i in range(0, bit):
    permutation = permutation + key[table[i] - 1]
  return permutation


################################################################################
#shift key by n bits.
def left_shift(key,n):
  temp = ""
  for i in range(n):
    for j in range(1,len(key)):
      temp = temp + key[j]
    temp = temp + key[0]
    key = temp
    temp = ""
  return key


################################################################################
#bitwise xor of two string a and b.
def xor(a,b):
  ans = ""
  for i in range(len(a)):
    if a[i] == b[i]:
      ans = ans + "0"
    else:
      ans = ans + "1"
  return ans


################################################################################


# Initial Permutation Table
initial_permutation = [58, 50, 42, 34, 26, 18, 10, 2,
                       60, 52, 44, 36, 28, 20, 12, 4,
                       62, 54, 46, 38, 30, 22, 14, 6,
                       64, 56, 48, 40, 32, 24, 16, 8,
                       57, 49, 41, 33, 25, 17, 9, 1,
                       59, 51, 43, 35, 27, 19, 11, 3,
                       61, 53, 45, 37, 29, 21, 13, 5,
                       63, 55, 47, 39, 31, 23, 15, 7]
 
# Expansion D-box Table
exp_d_box = [32, 1 , 2 , 3 , 4 , 5 , 4 , 5,
             6 , 7 , 8 , 9 , 8 , 9 , 10, 11,
            12, 13, 12, 13, 14, 15, 16, 17,
            16, 17, 18, 19, 20, 21, 20, 21,
            22, 23, 24, 25, 24, 25, 26, 27,
            28, 29, 28, 29, 30, 31, 32, 1 ]
 
# Straight Permutation Table
straight_permutation = [ 16,  7, 20, 21,
                         29, 12, 28, 17,
                         1, 15, 23, 26,
                         5, 18, 31, 10,
                         2,  8, 24, 14,
                         32, 27,  3,  9,
                         19, 13, 30,  6,
                         22, 11,  4, 25 ]
 
# S-box Table
s_box =  [[[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
          [ 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
          [ 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
          [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 ]],
            
         [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
            [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
            [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
           [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 ]],
   
         [ [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
           [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
           [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
            [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 ]],
       
          [ [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
           [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
           [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
            [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14] ],
        
          [ [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
           [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
            [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
           [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 ]],
       
         [ [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
           [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
            [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
            [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13] ],
         
          [ [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
           [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
            [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
            [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12] ],
        
         [ [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
            [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
            [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
            [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11] ] ]
   
# Final Permutation Table
final_permutation = [ 40, 8, 48, 16, 56, 24, 64, 32,
                      39, 7, 47, 15, 55, 23, 63, 31,
                      38, 6, 46, 14, 54, 22, 62, 30,
                      37, 5, 45, 13, 53, 21, 61, 29,
                      36, 4, 44, 12, 52, 20, 60, 28,
                      35, 3, 43, 11, 51, 19, 59, 27,
                      34, 2, 42, 10, 50, 18, 58, 26,
                      33, 1, 41, 9, 49, 17, 57, 25 ]



################################################################################
#Encryption of plain text.
def encrypt(pt, rkb, rk):
  pt = hexaTobinary(pt)
  
  # Initial Permutation
  pt = permute(pt, initial_permutation, 64)
  
  print("After initial permutation", binaryTohex(pt))
  print("\n")
  print("Round  i  left part   right part  round key")
  print("")
     
  # Splitting
  left = pt[0:32]
  right = pt[32:64]
  for i in range(0, 16):
    #  Expansion D-box: Expanding the 32 bits data into 48 bits
    right_expanded = permute(right, exp_d_box, 48)
         
    # XOR RoundKey[i] and right_expanded
    xor_x = xor(right_expanded, rkb[i])
 
    # S-boxex: substituting the value from s-box table by calculating row and column
    sbox_str = ""
    for j in range(0, 8):
      row = binTodec(int(xor_x[j * 6] + xor_x[j * 6 + 5]))
      col = binTodec(int(xor_x[j * 6 + 1] + xor_x[j * 6 + 2] + xor_x[j * 6 + 3] + xor_x[j * 6 + 4]))
      val = s_box[j][row][col]
      sbox_str = sbox_str + decTobin(val)
             
    # Straight D-box: After substituting rearranging the bits 
    sbox_str = permute(sbox_str, straight_permutation, 32)
         
    # XOR left and sbox_str
    result = xor(left, sbox_str)
    left = result
         
    # Swapp the left and right halves.
    if(i != 15):
      left, right = right, left
    print("Round ", i + 1, " ", binaryTohex(left), " ", binaryTohex(right), " ", rk[i])
     
  # Combination left and right 
  combine = left + right
     
  # Final permutation
  cipher_text = permute(combine, final_permutation, 64)
  return cipher_text

################################################################################


def main():
  
  pt = "123456ABCD132536"
  key = "AABB09182736CCDD"

  print("plain text 1   ------------------->", pt)
  print("key 1          ------------------->",key)

  print("\n ")
  
  
  #key Genration.
  key = hexaTobinary(key)
  
  #parity bit drop
  key_parity = [57, 49, 41, 33, 25, 17, 9,
                1, 58, 50, 42, 34, 26, 18,
                10, 2, 59, 51, 43, 35, 27,
                19, 11, 3, 60, 52, 44, 36,
                63, 55, 47, 39, 31, 23, 15,
                 7, 62, 54, 46, 38, 30, 22,
                14, 6, 61, 53, 45, 37, 29,
                21, 13, 5, 28, 20, 12, 4 ]
    
  #56 bit key from 64 bit using key_parity.
  key = permute(key, key_parity, 56)
  
  #no of shifts in per round(1-16).
  shift_table = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 ]
  
  
  # Key- Compression Table : Compression of key from 56 bits to 48 bits
  key_comp_table = [14, 17, 11, 24, 1, 5,
                   3, 28, 15, 6, 21, 10,
                   23, 19, 12, 4, 26, 8,
                   16, 7, 27, 20, 13, 2,
                   41, 52, 31, 37, 47, 55,
                   30, 40, 51, 45, 33, 48,
                   44, 49, 39, 56, 34, 53,
                   46, 42, 50, 36, 29, 32 ]

  # Splitting
  left = key[0:28]    
  right = key[28:56]  


  rkb = []
  rk  = []
  for i in range(0, 16):
    # Shifting the bits by nth shifts by checking from shift table
    left = left_shift(left, shift_table[i])
    right = left_shift(right, shift_table[i])
     
    # Combination of left and right string
    combine_str = left + right
     
    # Compression of key from 56 to 48 bits
    round_key = permute(combine_str, key_comp_table, 48)
  
    rkb.append(round_key)
    rk.append(binaryTohex(round_key))
    
  print("Encryption\n")
  cipher_text = binaryTohex(encrypt(pt, rkb, rk))
  print("Cipher Text : ",cipher_text)
 
  print("\n \n Decryption\n")
  rkb_rev = rkb[::-1]
  rk_rev = rk[::-1]
  text = binaryTohex(encrypt(cipher_text, rkb_rev, rk_rev))
  print("Plain Text : ",text)




  ##############################################################################
  pt = "ABCDEF1234567890"
  key = "AABB09182736CCDD"

  print("\n")
  print("#########################################################################")

  print("plain text 2   ------------------->", pt)
  print("key 2          ------------------->",key)

  print("\n ")

  print("Encryption\n")
  cipher_text = binaryTohex(encrypt(pt, rkb, rk))
  print("Cipher Text : ",cipher_text)
 
  print("\n \n Decryption\n")
  rkb_rev = rkb[::-1]
  rk_rev = rk[::-1]
  text = binaryTohex(encrypt(cipher_text, rkb_rev, rk_rev))
  print("Plain Text : ",text)






if __name__ == "__main__":
    main()